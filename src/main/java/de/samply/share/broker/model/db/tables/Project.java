/*
 * This file is generated by jOOQ.
*/
package de.samply.share.broker.model.db.tables;


import de.samply.share.broker.model.db.Keys;
import de.samply.share.broker.model.db.Samply;
import de.samply.share.broker.model.db.enums.ProjectStatus;
import de.samply.share.broker.model.db.tables.records.ProjectRecord;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Project extends TableImpl<ProjectRecord> {

    private static final long serialVersionUID = -335223648;

    /**
     * The reference instance of <code>samply.project</code>
     */
    public static final Project PROJECT = new Project();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectRecord> getRecordType() {
        return ProjectRecord.class;
    }

    /**
     * The column <code>samply.project.id</code>.
     */
    public final TableField<ProjectRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('samply.project_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>samply.project.name</code>.
     */
    public final TableField<ProjectRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>samply.project.received</code>.
     */
    public final TableField<ProjectRecord, Timestamp> RECEIVED = createField("received", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>samply.project.approved</code>.
     */
    public final TableField<ProjectRecord, Timestamp> APPROVED = createField("approved", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>samply.project.started</code>.
     */
    public final TableField<ProjectRecord, Date> STARTED = createField("started", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>samply.project.end_estimated</code>.
     */
    public final TableField<ProjectRecord, Date> END_ESTIMATED = createField("end_estimated", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>samply.project.end_actual</code>.
     */
    public final TableField<ProjectRecord, Date> END_ACTUAL = createField("end_actual", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>samply.project.seen</code>.
     */
    public final TableField<ProjectRecord, Boolean> SEEN = createField("seen", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>samply.project.projectleader_id</code>.
     */
    public final TableField<ProjectRecord, Integer> PROJECTLEADER_ID = createField("projectleader_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>samply.project.archived</code>.
     */
    public final TableField<ProjectRecord, Boolean> ARCHIVED = createField("archived", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>samply.project.status</code>.
     */
    public final TableField<ProjectRecord, ProjectStatus> STATUS = createField("status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(de.samply.share.broker.model.db.enums.ProjectStatus.class), this, "");

    /**
     * The column <code>samply.project.application_number</code>.
     */
    public final TableField<ProjectRecord, Integer> APPLICATION_NUMBER = createField("application_number", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samply.project.external_assessment</code>.
     */
    public final TableField<ProjectRecord, Boolean> EXTERNAL_ASSESSMENT = createField("external_assessment", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>samply.project</code> table reference
     */
    public Project() {
        this("project", null);
    }

    /**
     * Create an aliased <code>samply.project</code> table reference
     */
    public Project(String alias) {
        this(alias, PROJECT);
    }

    private Project(String alias, Table<ProjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private Project(String alias, Table<ProjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Samply.SAMPLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProjectRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROJECT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProjectRecord> getPrimaryKey() {
        return Keys.PROJECT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProjectRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectRecord>>asList(Keys.PROJECT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProjectRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectRecord, ?>>asList(Keys.PROJECT__PROJECT_PROJECTLEADER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Project as(String alias) {
        return new Project(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Project rename(String name) {
        return new Project(name, null);
    }
}
