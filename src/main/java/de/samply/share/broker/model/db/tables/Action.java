/*
 * This file is generated by jOOQ.
*/
package de.samply.share.broker.model.db.tables;


import de.samply.share.broker.model.db.Keys;
import de.samply.share.broker.model.db.Samply;
import de.samply.share.broker.model.db.enums.ActionType;
import de.samply.share.broker.model.db.tables.records.ActionRecord;

import java.sql.Date;
import java.sql.Time;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Action extends TableImpl<ActionRecord> {

    private static final long serialVersionUID = 1037653797;

    /**
     * The reference instance of <code>samply.action</code>
     */
    public static final Action ACTION = new Action();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActionRecord> getRecordType() {
        return ActionRecord.class;
    }

    /**
     * The column <code>samply.action.id</code>.
     */
    public final TableField<ActionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('samply.action_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>samply.action.type</code>.
     */
    public final TableField<ActionRecord, ActionType> TYPE = createField("type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(de.samply.share.broker.model.db.enums.ActionType.class), this, "");

    /**
     * The column <code>samply.action.date</code>.
     */
    public final TableField<ActionRecord, Date> DATE = createField("date", org.jooq.impl.SQLDataType.DATE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>samply.action.time</code>.
     */
    public final TableField<ActionRecord, Time> TIME = createField("time", org.jooq.impl.SQLDataType.TIME, this, "");

    /**
     * The column <code>samply.action.project_id</code>.
     */
    public final TableField<ActionRecord, Integer> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samply.action.user_id</code>.
     */
    public final TableField<ActionRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samply.action.message</code>.
     */
    public final TableField<ActionRecord, String> MESSAGE = createField("message", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>samply.action.icon</code>.
     */
    public final TableField<ActionRecord, String> ICON = createField("icon", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>samply.action</code> table reference
     */
    public Action() {
        this("action", null);
    }

    /**
     * Create an aliased <code>samply.action</code> table reference
     */
    public Action(String alias) {
        this(alias, ACTION);
    }

    private Action(String alias, Table<ActionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Action(String alias, Table<ActionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Samply.SAMPLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ActionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ActionRecord> getPrimaryKey() {
        return Keys.ACTION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ActionRecord>> getKeys() {
        return Arrays.<UniqueKey<ActionRecord>>asList(Keys.ACTION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ActionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ActionRecord, ?>>asList(Keys.ACTION__ACTION_PROJECT_ID_FKEY, Keys.ACTION__ACTION_USER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Action as(String alias) {
        return new Action(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Action rename(String name) {
        return new Action(name, null);
    }
}
