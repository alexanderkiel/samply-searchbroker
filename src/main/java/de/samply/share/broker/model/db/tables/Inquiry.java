/*
 * This file is generated by jOOQ.
*/
package de.samply.share.broker.model.db.tables;


import de.samply.share.broker.model.db.Keys;
import de.samply.share.broker.model.db.Samply;
import de.samply.share.broker.model.db.enums.InquiryStatus;
import de.samply.share.broker.model.db.tables.records.InquiryRecord;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Inquiry extends TableImpl<InquiryRecord> {

    private static final long serialVersionUID = 1327162936;

    /**
     * The reference instance of <code>samply.inquiry</code>
     */
    public static final Inquiry INQUIRY = new Inquiry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InquiryRecord> getRecordType() {
        return InquiryRecord.class;
    }

    /**
     * The column <code>samply.inquiry.id</code>.
     */
    public final TableField<InquiryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('samply.inquiry_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>samply.inquiry.project_id</code>.
     */
    public final TableField<InquiryRecord, Integer> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samply.inquiry.label</code>.
     */
    public final TableField<InquiryRecord, String> LABEL = createField("label", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>samply.inquiry.description</code>.
     */
    public final TableField<InquiryRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>samply.inquiry.created</code>.
     */
    public final TableField<InquiryRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>samply.inquiry.expires</code>.
     */
    public final TableField<InquiryRecord, Date> EXPIRES = createField("expires", org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.field("(now() + '28 days'::interval)", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>samply.inquiry.author_id</code>.
     */
    public final TableField<InquiryRecord, Integer> AUTHOR_ID = createField("author_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>samply.inquiry.archived</code>.
     */
    public final TableField<InquiryRecord, Boolean> ARCHIVED = createField("archived", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>samply.inquiry.criteria</code>.
     */
    public final TableField<InquiryRecord, String> CRITERIA = createField("criteria", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>samply.inquiry.viewfields</code>.
     */
    public final TableField<InquiryRecord, String> VIEWFIELDS = createField("viewfields", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>samply.inquiry.status</code>.
     */
    public final TableField<InquiryRecord, InquiryStatus> STATUS = createField("status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(de.samply.share.broker.model.db.enums.InquiryStatus.class), this, "");

    /**
     * The column <code>samply.inquiry.revision</code>.
     */
    public final TableField<InquiryRecord, Integer> REVISION = createField("revision", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>samply.inquiry.result_type</code>.
     */
    public final TableField<InquiryRecord, String> RESULT_TYPE = createField("result_type", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>samply.inquiry</code> table reference
     */
    public Inquiry() {
        this("inquiry", null);
    }

    /**
     * Create an aliased <code>samply.inquiry</code> table reference
     */
    public Inquiry(String alias) {
        this(alias, INQUIRY);
    }

    private Inquiry(String alias, Table<InquiryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Inquiry(String alias, Table<InquiryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Samply.SAMPLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<InquiryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INQUIRY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<InquiryRecord> getPrimaryKey() {
        return Keys.INQUIRY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<InquiryRecord>> getKeys() {
        return Arrays.<UniqueKey<InquiryRecord>>asList(Keys.INQUIRY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<InquiryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InquiryRecord, ?>>asList(Keys.INQUIRY__INQUIRY_PROJECT_ID_FKEY, Keys.INQUIRY__INQUIRY_AUTHOR_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Inquiry as(String alias) {
        return new Inquiry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Inquiry rename(String name) {
        return new Inquiry(name, null);
    }
}
