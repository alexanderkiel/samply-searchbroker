/*
 * This file is generated by jOOQ.
*/
package de.samply.share.broker.model.db.tables.daos;


import de.samply.share.broker.model.db.enums.DocumentType;
import de.samply.share.broker.model.db.tables.Document;
import de.samply.share.broker.model.db.tables.records.DocumentRecord;

import java.sql.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocumentDao extends DAOImpl<DocumentRecord, de.samply.share.broker.model.db.tables.pojos.Document, Integer> {

    /**
     * Create a new DocumentDao without any configuration
     */
    public DocumentDao() {
        super(Document.DOCUMENT, de.samply.share.broker.model.db.tables.pojos.Document.class);
    }

    /**
     * Create a new DocumentDao with an attached configuration
     */
    public DocumentDao(Configuration configuration) {
        super(Document.DOCUMENT, de.samply.share.broker.model.db.tables.pojos.Document.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(de.samply.share.broker.model.db.tables.pojos.Document object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<de.samply.share.broker.model.db.tables.pojos.Document> fetchById(Integer... values) {
        return fetch(Document.DOCUMENT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public de.samply.share.broker.model.db.tables.pojos.Document fetchOneById(Integer value) {
        return fetchOne(Document.DOCUMENT.ID, value);
    }

    /**
     * Fetch records that have <code>project_id IN (values)</code>
     */
    public List<de.samply.share.broker.model.db.tables.pojos.Document> fetchByProjectId(Integer... values) {
        return fetch(Document.DOCUMENT.PROJECT_ID, values);
    }

    /**
     * Fetch records that have <code>inquiry_id IN (values)</code>
     */
    public List<de.samply.share.broker.model.db.tables.pojos.Document> fetchByInquiryId(Integer... values) {
        return fetch(Document.DOCUMENT.INQUIRY_ID, values);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<de.samply.share.broker.model.db.tables.pojos.Document> fetchByUserId(Integer... values) {
        return fetch(Document.DOCUMENT.USER_ID, values);
    }

    /**
     * Fetch records that have <code>uploaded_at IN (values)</code>
     */
    public List<de.samply.share.broker.model.db.tables.pojos.Document> fetchByUploadedAt(Date... values) {
        return fetch(Document.DOCUMENT.UPLOADED_AT, values);
    }

    /**
     * Fetch records that have <code>filetype IN (values)</code>
     */
    public List<de.samply.share.broker.model.db.tables.pojos.Document> fetchByFiletype(String... values) {
        return fetch(Document.DOCUMENT.FILETYPE, values);
    }

    /**
     * Fetch records that have <code>filename IN (values)</code>
     */
    public List<de.samply.share.broker.model.db.tables.pojos.Document> fetchByFilename(String... values) {
        return fetch(Document.DOCUMENT.FILENAME, values);
    }

    /**
     * Fetch records that have <code>data IN (values)</code>
     */
    public List<de.samply.share.broker.model.db.tables.pojos.Document> fetchByData(byte[]... values) {
        return fetch(Document.DOCUMENT.DATA, values);
    }

    /**
     * Fetch records that have <code>document_type IN (values)</code>
     */
    public List<de.samply.share.broker.model.db.tables.pojos.Document> fetchByDocumentType(DocumentType... values) {
        return fetch(Document.DOCUMENT.DOCUMENT_TYPE, values);
    }
}
