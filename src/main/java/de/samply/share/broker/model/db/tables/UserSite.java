/*
 * This file is generated by jOOQ.
*/
package de.samply.share.broker.model.db.tables;


import de.samply.share.broker.model.db.Keys;
import de.samply.share.broker.model.db.Samply;
import de.samply.share.broker.model.db.tables.records.UserSiteRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserSite extends TableImpl<UserSiteRecord> {

    private static final long serialVersionUID = -1898608903;

    /**
     * The reference instance of <code>samply.user_site</code>
     */
    public static final UserSite USER_SITE = new UserSite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserSiteRecord> getRecordType() {
        return UserSiteRecord.class;
    }

    /**
     * The column <code>samply.user_site.user_id</code>.
     */
    public final TableField<UserSiteRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>samply.user_site.site_id</code>.
     */
    public final TableField<UserSiteRecord, Integer> SITE_ID = createField("site_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>samply.user_site.approved</code>.
     */
    public final TableField<UserSiteRecord, Boolean> APPROVED = createField("approved", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>samply.user_site</code> table reference
     */
    public UserSite() {
        this("user_site", null);
    }

    /**
     * Create an aliased <code>samply.user_site</code> table reference
     */
    public UserSite(String alias) {
        this(alias, USER_SITE);
    }

    private UserSite(String alias, Table<UserSiteRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserSite(String alias, Table<UserSiteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Samply.SAMPLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserSiteRecord> getPrimaryKey() {
        return Keys.USER_SITE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserSiteRecord>> getKeys() {
        return Arrays.<UniqueKey<UserSiteRecord>>asList(Keys.USER_SITE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserSiteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserSiteRecord, ?>>asList(Keys.USER_SITE__USER_SITE_USER_ID_FKEY, Keys.USER_SITE__USER_SITE_SITE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserSite as(String alias) {
        return new UserSite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSite rename(String name) {
        return new UserSite(name, null);
    }
}
