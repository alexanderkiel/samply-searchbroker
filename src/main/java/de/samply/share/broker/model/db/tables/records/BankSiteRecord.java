/*
 * This file is generated by jOOQ.
*/
package de.samply.share.broker.model.db.tables.records;


import de.samply.share.broker.model.db.tables.BankSite;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankSiteRecord extends UpdatableRecordImpl<BankSiteRecord> implements Record3<Integer, Integer, Boolean> {

    private static final long serialVersionUID = -259986558;

    /**
     * Setter for <code>samply.bank_site.bank_id</code>.
     */
    public void setBankId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>samply.bank_site.bank_id</code>.
     */
    public Integer getBankId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>samply.bank_site.site_id</code>.
     */
    public void setSiteId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>samply.bank_site.site_id</code>.
     */
    public Integer getSiteId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>samply.bank_site.approved</code>.
     */
    public void setApproved(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>samply.bank_site.approved</code>.
     */
    public Boolean getApproved() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, Integer, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, Integer, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return BankSite.BANK_SITE.BANK_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return BankSite.BANK_SITE.SITE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field3() {
        return BankSite.BANK_SITE.APPROVED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getBankId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getSiteId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value3() {
        return getApproved();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankSiteRecord value1(Integer value) {
        setBankId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankSiteRecord value2(Integer value) {
        setSiteId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankSiteRecord value3(Boolean value) {
        setApproved(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankSiteRecord values(Integer value1, Integer value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BankSiteRecord
     */
    public BankSiteRecord() {
        super(BankSite.BANK_SITE);
    }

    /**
     * Create a detached, initialised BankSiteRecord
     */
    public BankSiteRecord(Integer bankId, Integer siteId, Boolean approved) {
        super(BankSite.BANK_SITE);

        set(0, bankId);
        set(1, siteId);
        set(2, approved);
    }
}
