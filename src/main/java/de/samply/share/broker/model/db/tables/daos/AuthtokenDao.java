/*
 * This file is generated by jOOQ.
*/
package de.samply.share.broker.model.db.tables.daos;


import de.samply.share.broker.model.db.tables.Authtoken;
import de.samply.share.broker.model.db.tables.records.AuthtokenRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthtokenDao extends DAOImpl<AuthtokenRecord, de.samply.share.broker.model.db.tables.pojos.Authtoken, Integer> {

    /**
     * Create a new AuthtokenDao without any configuration
     */
    public AuthtokenDao() {
        super(Authtoken.AUTHTOKEN, de.samply.share.broker.model.db.tables.pojos.Authtoken.class);
    }

    /**
     * Create a new AuthtokenDao with an attached configuration
     */
    public AuthtokenDao(Configuration configuration) {
        super(Authtoken.AUTHTOKEN, de.samply.share.broker.model.db.tables.pojos.Authtoken.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(de.samply.share.broker.model.db.tables.pojos.Authtoken object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<de.samply.share.broker.model.db.tables.pojos.Authtoken> fetchById(Integer... values) {
        return fetch(Authtoken.AUTHTOKEN.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public de.samply.share.broker.model.db.tables.pojos.Authtoken fetchOneById(Integer value) {
        return fetchOne(Authtoken.AUTHTOKEN.ID, value);
    }

    /**
     * Fetch records that have <code>value IN (values)</code>
     */
    public List<de.samply.share.broker.model.db.tables.pojos.Authtoken> fetchByValue(String... values) {
        return fetch(Authtoken.AUTHTOKEN.VALUE, values);
    }

    /**
     * Fetch a unique record that has <code>value = value</code>
     */
    public de.samply.share.broker.model.db.tables.pojos.Authtoken fetchOneByValue(String value) {
        return fetchOne(Authtoken.AUTHTOKEN.VALUE, value);
    }

    /**
     * Fetch records that have <code>lastused IN (values)</code>
     */
    public List<de.samply.share.broker.model.db.tables.pojos.Authtoken> fetchByLastused(Timestamp... values) {
        return fetch(Authtoken.AUTHTOKEN.LASTUSED, values);
    }
}
