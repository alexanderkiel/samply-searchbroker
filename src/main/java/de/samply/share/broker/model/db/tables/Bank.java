/*
 * This file is generated by jOOQ.
*/
package de.samply.share.broker.model.db.tables;


import de.samply.share.broker.model.db.Keys;
import de.samply.share.broker.model.db.Samply;
import de.samply.share.broker.model.db.tables.records.BankRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bank extends TableImpl<BankRecord> {

    private static final long serialVersionUID = -897052661;

    /**
     * The reference instance of <code>samply.bank</code>
     */
    public static final Bank BANK = new Bank();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankRecord> getRecordType() {
        return BankRecord.class;
    }

    /**
     * The column <code>samply.bank.id</code>.
     */
    public final TableField<BankRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('samply.bank_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>samply.bank.email</code>.
     */
    public final TableField<BankRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>samply.bank.authtoken_id</code>.
     */
    public final TableField<BankRecord, Integer> AUTHTOKEN_ID = createField("authtoken_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>samply.bank.clientinfo</code>.
     */
    public final TableField<BankRecord, String> CLIENTINFO = createField("clientinfo", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>samply.bank</code> table reference
     */
    public Bank() {
        this("bank", null);
    }

    /**
     * Create an aliased <code>samply.bank</code> table reference
     */
    public Bank(String alias) {
        this(alias, BANK);
    }

    private Bank(String alias, Table<BankRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bank(String alias, Table<BankRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Samply.SAMPLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BankRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BANK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BankRecord> getPrimaryKey() {
        return Keys.BANK_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BankRecord>> getKeys() {
        return Arrays.<UniqueKey<BankRecord>>asList(Keys.BANK_PKEY, Keys.BANK_EMAIL_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BankRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BankRecord, ?>>asList(Keys.BANK__BANK_AUTHTOKEN_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bank as(String alias) {
        return new Bank(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bank rename(String name) {
        return new Bank(name, null);
    }
}
