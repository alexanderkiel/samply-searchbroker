/*
 * This file is generated by jOOQ.
*/
package de.samply.share.broker.model.db.tables;


import de.samply.share.broker.model.db.Keys;
import de.samply.share.broker.model.db.Samply;
import de.samply.share.broker.model.db.tables.records.NoteRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Note extends TableImpl<NoteRecord> {

    private static final long serialVersionUID = 196609705;

    /**
     * The reference instance of <code>samply.note</code>
     */
    public static final Note NOTE = new Note();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NoteRecord> getRecordType() {
        return NoteRecord.class;
    }

    /**
     * The column <code>samply.note.id</code>.
     */
    public final TableField<NoteRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('samply.note_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>samply.note.content</code>.
     */
    public final TableField<NoteRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>samply.note.created</code>.
     */
    public final TableField<NoteRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>samply.note.author_id</code>.
     */
    public final TableField<NoteRecord, Integer> AUTHOR_ID = createField("author_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>samply.note.project_id</code>.
     */
    public final TableField<NoteRecord, Integer> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>samply.note</code> table reference
     */
    public Note() {
        this("note", null);
    }

    /**
     * Create an aliased <code>samply.note</code> table reference
     */
    public Note(String alias) {
        this(alias, NOTE);
    }

    private Note(String alias, Table<NoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Note(String alias, Table<NoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Samply.SAMPLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<NoteRecord, Integer> getIdentity() {
        return Keys.IDENTITY_NOTE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NoteRecord> getPrimaryKey() {
        return Keys.NOTE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NoteRecord>> getKeys() {
        return Arrays.<UniqueKey<NoteRecord>>asList(Keys.NOTE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<NoteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NoteRecord, ?>>asList(Keys.NOTE__NOTE_AUTHOR_ID_FKEY, Keys.NOTE__NOTE_PROJECT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Note as(String alias) {
        return new Note(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Note rename(String name) {
        return new Note(name, null);
    }
}
