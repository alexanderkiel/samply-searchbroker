/*
 * This file is generated by jOOQ.
*/
package de.samply.share.broker.model.db.tables;


import de.samply.share.broker.model.db.Keys;
import de.samply.share.broker.model.db.Samply;
import de.samply.share.broker.model.db.tables.records.ReplyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reply extends TableImpl<ReplyRecord> {

    private static final long serialVersionUID = -1976433049;

    /**
     * The reference instance of <code>samply.reply</code>
     */
    public static final Reply REPLY = new Reply();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReplyRecord> getRecordType() {
        return ReplyRecord.class;
    }

    /**
     * The column <code>samply.reply.id</code>.
     */
    public final TableField<ReplyRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('samply.reply_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>samply.reply.content</code>.
     */
    public final TableField<ReplyRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>samply.reply.bank_id</code>.
     */
    public final TableField<ReplyRecord, Integer> BANK_ID = createField("bank_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>samply.reply.inquiry_id</code>.
     */
    public final TableField<ReplyRecord, Integer> INQUIRY_ID = createField("inquiry_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>samply.reply</code> table reference
     */
    public Reply() {
        this("reply", null);
    }

    /**
     * Create an aliased <code>samply.reply</code> table reference
     */
    public Reply(String alias) {
        this(alias, REPLY);
    }

    private Reply(String alias, Table<ReplyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Reply(String alias, Table<ReplyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Samply.SAMPLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ReplyRecord, Integer> getIdentity() {
        return Keys.IDENTITY_REPLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ReplyRecord> getPrimaryKey() {
        return Keys.REPLY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ReplyRecord>> getKeys() {
        return Arrays.<UniqueKey<ReplyRecord>>asList(Keys.REPLY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ReplyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ReplyRecord, ?>>asList(Keys.REPLY__REPLY_BANK_ID_FKEY, Keys.REPLY__REPLY_INQUIRY_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Reply as(String alias) {
        return new Reply(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reply rename(String name) {
        return new Reply(name, null);
    }
}
