/*
 * This file is generated by jOOQ.
*/
package de.samply.share.broker.model.db.tables.records;


import de.samply.share.broker.model.db.tables.Bank;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankRecord extends UpdatableRecordImpl<BankRecord> implements Record4<Integer, String, Integer, String> {

    private static final long serialVersionUID = -1009487707;

    /**
     * Setter for <code>samply.bank.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>samply.bank.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>samply.bank.email</code>.
     */
    public void setEmail(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>samply.bank.email</code>.
     */
    public String getEmail() {
        return (String) get(1);
    }

    /**
     * Setter for <code>samply.bank.authtoken_id</code>.
     */
    public void setAuthtokenId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>samply.bank.authtoken_id</code>.
     */
    public Integer getAuthtokenId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>samply.bank.clientinfo</code>.
     */
    public void setClientinfo(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>samply.bank.clientinfo</code>.
     */
    public String getClientinfo() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, Integer, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Bank.BANK.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Bank.BANK.EMAIL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Bank.BANK.AUTHTOKEN_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Bank.BANK.CLIENTINFO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getEmail();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getAuthtokenId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getClientinfo();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankRecord value2(String value) {
        setEmail(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankRecord value3(Integer value) {
        setAuthtokenId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankRecord value4(String value) {
        setClientinfo(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankRecord values(Integer value1, String value2, Integer value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BankRecord
     */
    public BankRecord() {
        super(Bank.BANK);
    }

    /**
     * Create a detached, initialised BankRecord
     */
    public BankRecord(Integer id, String email, Integer authtokenId, String clientinfo) {
        super(Bank.BANK);

        set(0, id);
        set(1, email);
        set(2, authtokenId);
        set(3, clientinfo);
    }
}
