/*
 * This file is generated by jOOQ.
*/
package de.samply.share.broker.model.db.tables;


import de.samply.share.broker.model.db.Keys;
import de.samply.share.broker.model.db.Samply;
import de.samply.share.broker.model.db.tables.records.TokenrequestRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tokenrequest extends TableImpl<TokenrequestRecord> {

    private static final long serialVersionUID = -632180169;

    /**
     * The reference instance of <code>samply.tokenrequest</code>
     */
    public static final Tokenrequest TOKENREQUEST = new Tokenrequest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokenrequestRecord> getRecordType() {
        return TokenrequestRecord.class;
    }

    /**
     * The column <code>samply.tokenrequest.id</code>.
     */
    public final TableField<TokenrequestRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('samply.tokenrequest_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>samply.tokenrequest.issued</code>.
     */
    public final TableField<TokenrequestRecord, Timestamp> ISSUED = createField("issued", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>samply.tokenrequest.email</code>.
     */
    public final TableField<TokenrequestRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>samply.tokenrequest.authcode</code>.
     */
    public final TableField<TokenrequestRecord, String> AUTHCODE = createField("authcode", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>samply.tokenrequest</code> table reference
     */
    public Tokenrequest() {
        this("tokenrequest", null);
    }

    /**
     * Create an aliased <code>samply.tokenrequest</code> table reference
     */
    public Tokenrequest(String alias) {
        this(alias, TOKENREQUEST);
    }

    private Tokenrequest(String alias, Table<TokenrequestRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tokenrequest(String alias, Table<TokenrequestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Samply.SAMPLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TokenrequestRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TOKENREQUEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TokenrequestRecord> getPrimaryKey() {
        return Keys.TOKENREQUEST_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TokenrequestRecord>> getKeys() {
        return Arrays.<UniqueKey<TokenrequestRecord>>asList(Keys.TOKENREQUEST_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tokenrequest as(String alias) {
        return new Tokenrequest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokenrequest rename(String name) {
        return new Tokenrequest(name, null);
    }
}
